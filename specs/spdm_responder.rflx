with SPDM;

package SPDM_Responder is

   --  FIXME: Update transcript hash

   type DHE_Algo is
      (DA_FFDHE2048 =>  1,
       DA_FFDHE3072 =>  2,
       DA_FFDHE4096 =>  4,
       DA_SecP256r1 =>  8,
       DA_SecP384r1 => 16,
       DA_SecP521r1 => 32)
   with Size => 8;

   type AEAD_Algo is
      (AA_AES_128_GCM       => 1,
       AA_AES_256_GCM       => 2,
       AA_ChaCha20_Poly1305 => 4)
   with Size => 8;

   type Digests_Length is range 0 .. 512 with Size => 16;

   type Digests_Data is
      message
         Slot_0_Present : SPDM::Slot_Present;
         Slot_1_Present : SPDM::Slot_Present;
         Slot_2_Present : SPDM::Slot_Present;
         Slot_3_Present : SPDM::Slot_Present;
         Slot_4_Present : SPDM::Slot_Present;
         Slot_5_Present : SPDM::Slot_Present;
         Slot_6_Present : SPDM::Slot_Present;
         Slot_7_Present : SPDM::Slot_Present;
         Length : Digests_Length;
         Value : Opaque
            with Size => 8 * Length;
      end message;

   type Signature is
      message
         Length : SPDM::Signature_Length
            then Data
               with Size => Length * 8
               if Length = 64
                  or Length = 96
                  or Length = 132
                  or Length = 256
                  or Length = 384
                  or Length = 512;
         Data : Opaque;
      end message;

   type Opaque_Data is
      message
         Length : SPDM::Length_16;
         Data   : Opaque
            with Size => Length * 8;
      end message;
#if FEATURE_KEY_EXCHANGE then
   type Hash is
      message
         Length : SPDM::Hash_Length
            then Data
               with Size => Length * 8
               if Length = 32
                  or Length = 48
                  or Length = 64;
         Data : Opaque;
      end message;

   type Exchange_Data is
      message
         Length : SPDM::Exchange_Data_Length;
         Pad : SPDM::Reserved_6;
         Data : Opaque
            with Size => Length * 8;
      end message;

   type Measurement_Summary is
      message
         Data : SPDM::Measurement_Record;
      end message;

   type SPDM_Header is
      message
         Major_Version : SPDM::Major_Version
            then Minor_Version
               if Major_Version = 1;
         Minor_Version : SPDM::Minor_Version
            then Code
               if Minor_Version <= 1;
         Code : SPDM::Response_Code;
      end message;

   type Next_Transcript_State is (Send_Vers, Send_Cap, Send_Alg, Send_Finish) with
      Size => 8;
#end if;

   generic
      Transport : Channel with Readable, Writable;
      with function Plat_Cfg_CT_Exponent return SPDM::CT_Exponent;
      with function Plat_Cfg_Cap_Meas_Fresh return Boolean;
      with function Plat_Cfg_Cap_Meas return SPDM::Meas_Cap;
      with function Plat_Cfg_Cap_Chal return Boolean;
      with function Plat_Cfg_Cap_Cert return Boolean;
      with function Plat_Cfg_Cap_Cache return Boolean;
      with function Plat_Cfg_Cap_Key_Upd return Boolean;
      with function Plat_Cfg_Cap_Hbeat return Boolean;
      with function Plat_Cfg_Cap_Encap return Boolean;
      with function Plat_Cfg_Cap_Mut_Auth return Boolean;
      with function Plat_Cfg_Cap_Pub_Key_ID return Boolean;
#if FEATURE_KEY_EXCHANGE then
      with function Plat_Cfg_Cap_MAC return Boolean;
      with function Plat_Cfg_Cap_Encrypt return Boolean;
      with function Plat_Cfg_Cap_PSK return SPDM::PSK_Resp_Cap;
      with function Plat_Cfg_Cap_Key_Ex return Boolean;
      with function Plat_Cfg_Cap_Handshake_In_The_Clear return Boolean;
#end if;
      with function Plat_Cfg_Sel_Measurement_Hash_Algo
         (TPM_ALG_SHA_256     : Boolean;
          TPM_ALG_SHA_384     : Boolean;
          TPM_ALG_SHA_512     : Boolean;
          TPM_ALG_SHA3_256    : Boolean;
          TPM_ALG_SHA3_384    : Boolean;
          TPM_ALG_SHA3_512    : Boolean;
          Raw_Bit_Streams_Only : Boolean) return SPDM::Measurement_Hash_Algo;
      with function Plat_Cfg_Sel_Base_Asym_Algo (TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
                                                 TPM_ALG_RSAPSS_4096         : Boolean;
                                                 TPM_ALG_RSASSA_4096         : Boolean;
                                                 TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
                                                 TPM_ALG_RSAPSS_3072         : Boolean;
                                                 TPM_ALG_RSASSA_3072         : Boolean;
                                                 TPM_ALG_RSAPSS_2048         : Boolean;
                                                 TPM_ALG_RSASSA_2048         : Boolean;
                                                 TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean) return SPDM::Base_Asym_Algo;
      with function Plat_Cfg_Sel_Base_Hash_Algo (TPM_ALG_SHA_256  : Boolean;
                                                 TPM_ALG_SHA_384  : Boolean;
                                                 TPM_ALG_SHA_512  : Boolean;
                                                 TPM_ALG_SHA3_256 : Boolean;
                                                 TPM_ALG_SHA3_384 : Boolean;
                                                 TPM_ALG_SHA3_512 : Boolean) return SPDM::Base_Hash_Algo;
#if FEATURE_KEY_EXCHANGE then
      with function Plat_Cfg_Sel_DHE
         (Req_SecP521r1 : Boolean;
          Req_SecP384r1 : Boolean;
          Req_SecP256r1 : Boolean;
          Req_FFDHE4096 : Boolean;
          Req_FFDHE3072 : Boolean;
          Req_FFDHE2048 : Boolean) return SPDM_Responder::DHE_Algo;

      with function Plat_Cfg_Sel_AEAD
         (Req_ChaCha20_Poly1305 : Boolean;
          Req_AES_256_GCM       : Boolean;
          Req_AES_128_GCM       : Boolean) return SPDM_Responder::AEAD_Algo;
#end if;
      with function Plat_Cfg_Sel_RBAA
         (Req_TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
          Req_TPM_ALG_RSAPSS_4096         : Boolean;
          Req_TPM_ALG_RSASSA_4096         : Boolean;
          Req_TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
          Req_TPM_ALG_RSAPSS_3072         : Boolean;
          Req_TPM_ALG_RSASSA_3072         : Boolean;
          Req_TPM_ALG_RSAPSS_2048         : Boolean;
          Req_TPM_ALG_RSASSA_2048         : Boolean;
          Req_TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean) return SPDM::Base_Asym_Algo;

      with function Plat_Get_Digests_Data (Algo : SPDM::Measurement_Hash_Algo) return Digests_Data;

      with function Plat_Valid_Certificate_Request
         (Slot   : SPDM::Slot;
          Offset : SPDM::Offset;
          Length : SPDM::Length_16) return Boolean;

      with function Plat_Get_Certificate_Response
         (Slot   : SPDM::Slot;
          Offset : SPDM::Offset;
          Length : SPDM::Length_16) return SPDM::Certificate_Response;

      with function Plat_Get_Number_Of_Indices return SPDM::Measurement_Count;
#if FEATURE_KEY_EXCHANGE then
      with function Plat_Get_Number_Of_Indices_TCB return SPDM::Measurement_Count;
#end if;
      with function Plat_Get_Nonce return SPDM::Nonce;

      with function Plat_Get_DMTF_Measurement_Field (Index : SPDM::Index) return SPDM::DMTF_Measurement_Field;

      with function Plat_Get_Meas_Signature (Unsigned_Message : Opaque;
                                             Sign_Length      : SPDM::Length_24;
                                             Nonce_Offset     : SPDM::Length_24;
                                             Slot             : SPDM::Narrow_Slot) return Signature;

      with function Plat_Update_Meas_Signature (Message : Opaque; Reset : Boolean) return Boolean;

      with function Plat_Get_Meas_Opaque_Data return Opaque_Data;

#if FEATURE_KEY_EXCHANGE then
      with function Plat_Get_Exchange_Data (Exchange_Data : Opaque) return Exchange_Data;

      with function Plat_Get_Heartbeat_Period return SPDM::Heartbeat_Period;

      with function Plat_Valid_Session_ID (Req_Session_ID : SPDM::Session_ID) return Boolean;

      with function Plat_Get_Session_ID (Req_Session_ID : SPDM::Session_ID) return SPDM::Session_ID;

      with function Plat_Use_Mutual_Auth return Boolean;

      with function Plat_Get_Summary_Hash (Data : Opaque) return Hash;

      with function Plat_Update_Transcript_Signature (Message : Opaque;
                                                      Length  : SPDM::Length_16;
                                                      Reset   : Boolean) return Boolean;

      with function Plat_Update_Transcript_Signature_Cert (Slot : SPDM::Slot) return Boolean;

      with function Plat_Get_Transcript_Signature (Slot : SPDM::Slot) return Signature;

      with function Plat_Get_Key_Ex_Opaque_Data (Request_Data : Opaque) return Opaque_Data;

      with function Plat_Get_Key_Ex_Verify_Data return Hash;

      with function Plat_Validate_Finish_Signature (Request : Opaque; Slot : SPDM::Slot) return Boolean;

      with function Plat_Get_Finish_Verify_Data return Hash;

      with function Plat_Set_Secure_Session (Enable : Boolean) return Boolean;

      with function Plat_Key_Update (Operation : SPDM::Key_Operation) return Boolean;

      with function Plat_End_Session return Boolean;

      with function To_Narrow_Slot (Slot : SPDM::Slot) return SPDM::Narrow_Slot;

      with function Null_Hash (Length : SPDM::Hash_Length) return Hash;
#end if;
      with function Null_Signature (Length : SPDM::Signature_Length) return Signature;
   session Session with
      Initial => Init,
      Final => End_Session
   is
      Request                : SPDM::Request;
      Response               : SPDM::Response;
      Supp_Versions          : SPDM::Version_Number_Entries;
      Measurement_Hash_Algo  : SPDM::Measurement_Hash_Algo;
      Hash_Length            : SPDM::Hash_Length := 32;
      Signature_Length       : SPDM::Signature_Length := 0;
      Base_Asym_Sel          : SPDM::Base_Asym_Algo;
      Slot                   : SPDM::Slot;
      Offset                 : SPDM::Offset;
      Length                 : SPDM::Length_16;
      Req_Base_Asym_Alg_List : SPDM::Req_Alg_Structs;
      Resp_Alg_Structs       : SPDM::Resp_Alg_Structs;
      Resp_Alg_Struct_Count  : SPDM::Alg_Struct_Count;
      Reset_Measurement_Sig  : Boolean := True;
      Measurement_Slot       : SPDM::Narrow_Slot;
      Measurement_Record     : SPDM::Measurement_Record;
      Current_Measurement    : SPDM::Index;
      Last_Measurement       : SPDM::Index;
      Number_Of_Indices      : SPDM::Measurement_Count;
      Number_Of_Blocks       : SPDM::Block_Count;
      Error_Code             : SPDM::Error_Code;
#if FEATURE_KEY_EXCHANGE then
      DHE_Algo               : DHE_Algo;
      DHE_List               : SPDM::Req_Alg_Structs;
      AEAD_Cipher_Suite_List : SPDM::Req_Alg_Structs;
      Key_Schedule_List      : SPDM::Req_Alg_Structs;
      Next_Transcript_State  : Next_Transcript_State;
      Exchange_Data_Length   : SPDM::Exchange_Data_Length := 0;
      Measurement_Summary    : Boolean;
      Use_Mutual_Auth        : Boolean;
      Secure_Session         : Boolean;
#end if;

      --  Capabilities
      CT_Exponent                : SPDM::CT_Exponent  := 0;
      Cap_MAC                    : Boolean            := False;
      Cap_Encrypt                : Boolean            := False;
      Cap_Meas_Fresh             : Boolean            := False;
      Cap_Meas                   : SPDM::Meas_Cap     := SPDM::Meas_Unsupported;
      Cap_Chal                   : Boolean            := False;
      Cap_Cert                   : Boolean            := False;
      Cap_Cache                  : Boolean            := False;
      Cap_Handshake_In_The_Clear : Boolean            := False;
      Cap_Key_Upd                : Boolean            := False;
      Cap_Hbeat                  : Boolean            := False;
      Cap_Encap                  : Boolean            := False;
      Cap_PSK                    : SPDM::PSK_Resp_Cap := SPDM::PSK_Resp_Unsupported;
      Cap_Key_Ex                 : Boolean            := False;
      Cap_Mut_Auth               : Boolean            := False;
      Cap_Pub_Key_ID             : Boolean            := False;
   begin
      state Init
      is
      begin
      transition
         goto Receive_Get_Version
      end Init;

      state Receive_Get_Version
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            --  FIXME: [161] After receiving a GET_VERSION request, the Responder shall cancel all previous requests
            --  from the same Requester. All active sessions between the Requester and the Responder are terminated,
            --  i.e., information (such as session keys, session IDs) for those sessions should not be used anymore.
            --  Additionally, this message shall clear or reset the previously Negotiated State, if any,
            --  in both the Requester and its corresponding Responder.
            if Request'Valid and Request.Code = SPDM::Get_Version
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Get_Version;

      state Prepare_Version
      is
      begin
         Supp_Versions'Reset;
         Supp_Versions'Append
            (SPDM::Version_Number_Entry'(Alpha                 => 0,
                                         Update_Version_Number => 0,
                                         Minor_Version         => 1,
                                         Major_Version         => 1));
         Resp_Alg_Structs'Reset;
         Resp_Alg_Struct_Count := 0;
         Reset_Measurement_Sig := True;
#if FEATURE_KEY_EXCHANGE then
         Secure_Session := Plat_Set_Secure_Session (False);
#end if;
         Response := SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap                                    => Cap_Meas,
            Hash_Type                                   => SPDM::No_Measurement,
#end if;
            Hash_Length                                 => Hash_Length,
            Signature_Length                            => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
            Exchange_Data_Length                        => Exchange_Data_Length,
            Handshake_In_The_Clear                      => Cap_Handshake_In_The_Clear,
#end if;
            Has_Signature                               => False,
#if FEATURE_KEY_EXCHANGE then
            Has_Measurement_Hash                        => False,
#end if;
            Major_Version                               => 1,
            Minor_Version                               => 0,
            Code                                        => SPDM::Version,
            Version_Response_Param_1                    => 0,
            Version_Response_Param_2                    => 0,
            Version_Response_Reserved                   => 0,
            Version_Response_Version_Number_Entry_Count => 1,
            Version_Response_Version_Number_Entries     => Supp_Versions);
#if FEATURE_KEY_EXCHANGE then
         Next_Transcript_State := Send_Vers;
#end if;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Update_Transcript_Hash
#else
         goto Send_Version
#end if;
      exception
         goto Error_Unspecified
      end Prepare_Version;
#if FEATURE_KEY_EXCHANGE then
      state Update_Transcript_Hash
      is
         Req_Success  : Boolean;
         Resp_Success : Boolean;
         Req_Length   : SPDM::Length_16;
         Resp_Length  : SPDM::Length_16;
      begin
         Req_Length   := Request'Size;
         Req_Length   := Req_Length * 8;
         Resp_Length  := Response'Size;
         Resp_Length  := Resp_Length * 8;
         Req_Success  := Plat_Update_Transcript_Signature (Request'Opaque, Req_Length, True);
         Resp_Success := Plat_Update_Transcript_Signature (Response'Opaque, Resp_Length, False);
      transition
         goto Error_Unspecified
            if Req_Success = False or Resp_Success = False
         goto Send_Version
            if Next_Transcript_State = Send_Vers
         goto Send_Capabilities
            if Next_Transcript_State = Send_Cap
         goto Send_Idle
            if Next_Transcript_State = Send_Alg
         goto Send_Idle
            if Next_Transcript_State = Send_Finish
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Update_Transcript_Hash;
#end if;
      state Send_Version
      is
      begin
         Transport'Write (Response);
      transition
         goto Receive_Get_Capabilities
      end Send_Version;

      state Receive_Get_Capabilities
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            if Request'Valid and Request.Code = SPDM::Get_Version
         goto Prepare_Capabilities
            if Request'Valid and Request.Code = SPDM::Get_Capabilities
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Get_Capabilities;

      state Prepare_Capabilities
      is
      begin
         CT_Exponent                := Plat_Cfg_CT_Exponent;
         Cap_Meas_Fresh             := Plat_Cfg_Cap_Meas_Fresh;
         Cap_Meas                   := Plat_Cfg_Cap_Meas;
         Cap_Chal                   := Plat_Cfg_Cap_Chal;
         Cap_Cert                   := Plat_Cfg_Cap_Cert;
         Cap_Cache                  := Plat_Cfg_Cap_Cache;
         Cap_Key_Upd                := Plat_Cfg_Cap_Key_Upd;
         Cap_Hbeat                  := Plat_Cfg_Cap_Hbeat;
         Cap_Encap                  := Plat_Cfg_Cap_Encap;
         Cap_Mut_Auth               := Plat_Cfg_Cap_Mut_Auth;
         Cap_Pub_Key_ID             := Plat_Cfg_Cap_Pub_Key_ID;
#if FEATURE_KEY_EXCHANGE then
         Cap_MAC                    := Plat_Cfg_Cap_MAC;
         Cap_Encrypt                := Plat_Cfg_Cap_Encrypt;
         Cap_PSK                    := Plat_Cfg_Cap_PSK;
         Cap_Key_Ex                 := Plat_Cfg_Cap_Key_Ex;
         Cap_Handshake_In_The_Clear := Plat_Cfg_Cap_Handshake_In_The_Clear;
#else
         Cap_MAC                    := False;
         Cap_Encrypt                := False;
         Cap_PSK                    := SPDM::PSK_Resp_Unsupported;
         Cap_Key_Ex                 := False;
         Cap_Handshake_In_The_Clear := False;
#end if;

         --  The spec only specifies that the responder sends the capabilities it supports
         --  without taking into account what the requester supports.
         Response :=
            SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
               Meas_Cap                                         => Cap_Meas,
               Hash_Type                                        => SPDM::No_Measurement,
#end if;
               Hash_Length                                      => Hash_Length,
               Signature_Length                                 => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
               Exchange_Data_Length                             => Exchange_Data_Length,
               Handshake_In_The_Clear                           => Cap_Handshake_In_The_Clear,
#end if;
               Has_Signature                                    => False,
#if FEATURE_KEY_EXCHANGE then
               Has_Measurement_Hash                             => False,
#end if;
               Major_Version                                    => 1,
               Minor_Version                                    => 1,
               Code                                             => SPDM::Capabilities,
               Capabilities_Response_Param_1                    => 0,
               Capabilities_Response_Param_2                    => 0,
               Capabilities_Response_Reserved_1                 => 0,
               Capabilities_Response_CT_Exponent                => CT_Exponent,
               Capabilities_Response_Reserved_2                 => 0,
               Capabilities_Response_MAC_Cap                    => Cap_MAC,
               Capabilities_Response_Encrypt_Cap                => Cap_Encrypt,
               Capabilities_Response_Meas_Fresh_Cap             => Cap_Meas_Fresh,
               Capabilities_Response_Meas_Cap                   => Cap_Meas,
               Capabilities_Response_Chal_Cap                   => Cap_Chal,
               Capabilities_Response_Cert_Cap                   => Cap_Cert,
               Capabilities_Response_Cache_Cap                  => Cap_Cache,
               Capabilities_Response_Handshake_In_The_Clear_Cap => Cap_Handshake_In_The_Clear,
               Capabilities_Response_Key_Upd_Cap                => Cap_Key_Upd,
               Capabilities_Response_Hbeat_Cap                  => Cap_Hbeat,
               Capabilities_Response_Encap_Cap                  => Cap_Encap,
               Capabilities_Response_PSK_Cap                    => Cap_PSK,
               Capabilities_Response_Key_Ex_Cap                 => Cap_Key_Ex,
               Capabilities_Response_Mut_Auth_Cap               => Cap_Mut_Auth,
               Capabilities_Response_Reserved_4                 => 0,
               Capabilities_Response_Pub_Key_ID_Cap             => Cap_Pub_Key_ID);

         --  For the behaviour when responding the responder has to take the
         --  capabilities supported by the requester into account.
         -- FIXME CT_Exponent                := CT_Exponent;  --  Min(Resp.CT_Exp, Req.CT_Exp)?
         Cap_MAC                    := Cap_MAC and Request.Get_Capabilities_Request_MAC_Cap;
         Cap_Encrypt                := Cap_Encrypt and Request.Get_Capabilities_Request_Encrypt_Cap;
         Cap_Chal                   := Cap_Chal and Request.Get_Capabilities_Request_Chal_Cap;
         Cap_Cert                   := Cap_Cert and Request.Get_Capabilities_Request_Cert_Cap;
         Cap_Handshake_In_The_Clear :=
            Cap_Handshake_In_The_Clear and Request.Get_Capabilities_Request_Handshake_In_The_Clear_Cap;
         Cap_Key_Upd                := Cap_Key_Upd and Request.Get_Capabilities_Request_Key_Upd_Cap;
         Cap_Hbeat                  := Cap_Hbeat and Request.Get_Capabilities_Request_Hbeat_Cap;
         Cap_Encap                  := Cap_Encap and Request.Get_Capabilities_Request_Encap_Cap;
         --  FIXME Cap_PSK                    := Cap_PSK and Request.Get_Capabilities_Request_PSK_Cap; ?
         Cap_Key_Ex                 := Cap_Key_Ex and Request.Get_Capabilities_Request_Key_Ex_Cap;
         Cap_Mut_Auth               := Cap_Mut_Auth and Request.Get_Capabilities_Request_Mut_Auth_Cap;
         Cap_Pub_Key_ID             := Cap_Pub_Key_ID and Request.Get_Capabilities_Request_Pub_Key_ID_Cap;
#if FEATURE_KEY_EXCHANGE then
         Next_Transcript_State := Send_Cap;
#end if;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Update_Transcript_Hash
#else
         goto Send_Capabilities
#end if;
      exception
         goto Error_Unspecified
      end Prepare_Capabilities;

      state Send_Capabilities
      is
      begin
         Transport'Write (Response);
      transition
         goto Receive_Negotiate_Algorithms
      end Send_Capabilities;

      state Receive_Negotiate_Algorithms
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            if Request'Valid and Request.Code = SPDM::Get_Version
#if FEATURE_KEY_EXCHANGE then
         goto Check_Algorithms_DHE
            if Request'Valid and Request.Code = SPDM::Negotiate_Algorithms and Cap_Key_Ex
#end if;
         goto Check_Algorithms_Req_Base_Asym_Alg
            if Request'Valid and Request.Code = SPDM::Negotiate_Algorithms
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Negotiate_Algorithms;
#if FEATURE_KEY_EXCHANGE then
      state Check_Algorithms_DHE
      is
      begin
         Resp_Alg_Structs'Reset;
         DHE_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                      if A.Alg_Type = SPDM::DHE => A];
      transition
         goto Prepare_Algorithms_DHE
            if DHE_List'Size > 0
         goto Check_Algorithms_AEAD_Cipher_Suite
      exception
         goto Error_Unspecified
      end Check_Algorithms_DHE;

      state Prepare_Algorithms_DHE
      is
         Sel_SecP521r1 : Boolean;
         Sel_SecP384r1 : Boolean;
         Sel_SecP256r1 : Boolean;
         Sel_FFDHE4096 : Boolean;
         Sel_FFDHE3072 : Boolean;
         Sel_FFDHE2048 : Boolean;
         DHE           : SPDM::Alg_Struct;
      begin
         DHE := DHE_List'Head;
         DHE_Algo := Plat_Cfg_Sel_DHE
            (DHE.DHE_SecP521r1,
             DHE.DHE_SecP384r1,
             DHE.DHE_SecP256r1,
             DHE.DHE_FFDHE4096,
             DHE.DHE_FFDHE3072,
             DHE.DHE_FFDHE2048);

         Sel_SecP521r1 := DHE_Algo = DA_SecP521r1;
         Sel_SecP384r1 := DHE_Algo = DA_SecP384r1;
         Sel_SecP256r1 := DHE_Algo = DA_SecP256r1;
         Sel_FFDHE4096 := DHE_Algo = DA_FFDHE4096;
         Sel_FFDHE3072 := DHE_Algo = DA_FFDHE3072;
         Sel_FFDHE2048 := DHE_Algo = DA_FFDHE2048;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type        => SPDM::DHE,
               Fixed_Alg_Count => 2,
               Ext_Alg_Count   => 0,
               DHE_Reserved_1  => 0,
               DHE_SecP521r1   => Sel_SecP521r1,
               DHE_SecP384r1   => Sel_SecP384r1,
               DHE_SecP256r1   => Sel_SecP256r1,
               DHE_FFDHE4096   => Sel_FFDHE4096,
               DHE_FFDHE3072   => Sel_FFDHE3072,
               DHE_FFDHE2048   => Sel_FFDHE2048,
               DHE_Reserved_2  => 0,
               Alg_External    => [])
         );
         Resp_Alg_Struct_Count := Resp_Alg_Struct_Count + 1;
      transition
         goto Check_Algorithms_AEAD_Cipher_Suite
      exception
         goto Error_Unspecified
      end Prepare_Algorithms_DHE;

      state Check_Algorithms_AEAD_Cipher_Suite
      is
      begin
         AEAD_Cipher_Suite_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                                    if A.Alg_Type = SPDM::AEAD_Cipher_Suite => A];
      transition
         goto Prepare_Algorithms_AEAD_Cipher_Suite
            if AEAD_Cipher_Suite_List'Size > 0 and Cap_Key_Ex
         goto Check_Algorithms_Req_Base_Asym_Alg
      exception
         goto Error_Unspecified
      end Check_Algorithms_AEAD_Cipher_Suite;

      state Prepare_Algorithms_AEAD_Cipher_Suite
      is
         AEAD_Cipher_Suite     : SPDM::Alg_Struct;
         AEAD_Algo             : SPDM_Responder::AEAD_Algo;
         Sel_ChaCha20_Poly1305 : Boolean;
         Sel_AES_256_GCM       : Boolean;
         Sel_AES_128_GCM       : Boolean;
      begin
         AEAD_Cipher_Suite := AEAD_Cipher_Suite_List'Head;

         AEAD_Algo := Plat_Cfg_Sel_AEAD
            (AEAD_Cipher_Suite.AEAD_ChaCha20_Poly1305,
             AEAD_Cipher_Suite.AEAD_AES_256_GCM,
             AEAD_Cipher_Suite.AEAD_AES_128_GCM);

         Sel_ChaCha20_Poly1305 := AEAD_Algo = AA_ChaCha20_Poly1305;
         Sel_AES_256_GCM       := AEAD_Algo = AA_AES_256_GCM;
         Sel_AES_128_GCM       := AEAD_Algo = AA_AES_128_GCM;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type               => SPDM::AEAD_Cipher_Suite,
               Fixed_Alg_Count        => 2,
               Ext_Alg_Count          => 0,
               AEAD_Reserved_1        => 0,
               AEAD_ChaCha20_Poly1305 => Sel_ChaCha20_Poly1305,
               AEAD_AES_256_GCM       => Sel_AES_256_GCM,
               AEAD_AES_128_GCM       => Sel_AES_128_GCM,
               AEAD_Reserved_2        => 0,
               Alg_External           => [])
         );
         Resp_Alg_Struct_Count := Resp_Alg_Struct_Count + 1;
      transition
         goto Check_Algorithms_Req_Base_Asym_Alg
      exception
         goto Error_Unspecified
      end Prepare_Algorithms_AEAD_Cipher_Suite;
#end if;
      state Check_Algorithms_Req_Base_Asym_Alg
      is
      begin
         Req_Base_Asym_Alg_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                                    if A.Alg_Type = SPDM::Req_Base_Asym_Alg => A];
      transition
         goto Prepare_Algorithms_Req_Base_Asym_Alg
            if Req_Base_Asym_Alg_List'Size > 0
#if FEATURE_KEY_EXCHANGE then
         goto Check_Algorithms_Key_Schedule
            if Cap_Key_Ex
#end if;
         goto Prepare_Algorithms
      exception
         goto Error_Unspecified
      end Check_Algorithms_Req_Base_Asym_Alg;

      state Prepare_Algorithms_Req_Base_Asym_Alg
      is
         Req_Base_Asym_Alg               : SPDM::Alg_Struct;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
         Sel_TPM_ALG_RSAPSS_4096         : Boolean;
         Sel_TPM_ALG_RSASSA_4096         : Boolean;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
         Sel_TPM_ALG_RSAPSS_3072         : Boolean;
         Sel_TPM_ALG_RSASSA_3072         : Boolean;
         Sel_TPM_ALG_RSAPSS_2048         : Boolean;
         Sel_TPM_ALG_RSASSA_2048         : Boolean;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean;
         RBAA_Algo                       : SPDM::Base_Asym_Algo;
      begin
         Req_Base_Asym_Alg := Req_Base_Asym_Alg_List'Head;
         RBAA_Algo := Plat_Cfg_Sel_RBAA
            (Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P384,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_4096,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_4096,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P256,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_3072,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_3072,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_2048,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_2048,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P521);

         Sel_TPM_ALG_ECDSA_ECC_NIST_P384 := RBAA_Algo = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P384;
         Sel_TPM_ALG_RSAPSS_4096         := RBAA_Algo = SPDM::BA_TPM_ALG_RSAPSS_4096;
         Sel_TPM_ALG_RSASSA_4096         := RBAA_Algo = SPDM::BA_TPM_ALG_RSASSA_4096;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P256 := RBAA_Algo = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P256;
         Sel_TPM_ALG_RSAPSS_3072         := RBAA_Algo = SPDM::BA_TPM_ALG_RSAPSS_3072;
         Sel_TPM_ALG_RSASSA_3072         := RBAA_Algo = SPDM::BA_TPM_ALG_RSASSA_3072;
         Sel_TPM_ALG_RSAPSS_2048         := RBAA_Algo = SPDM::BA_TPM_ALG_RSAPSS_2048;
         Sel_TPM_ALG_RSASSA_2048         := RBAA_Algo = SPDM::BA_TPM_ALG_RSASSA_2048;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P521 := RBAA_Algo = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P521;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type                         => SPDM::Req_Base_Asym_Alg,
               Fixed_Alg_Count                  => 2,
               Ext_Alg_Count                    => 0,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P384 => Sel_TPM_ALG_ECDSA_ECC_NIST_P384,
               RBAA_TPM_ALG_RSAPSS_4096         => Sel_TPM_ALG_RSAPSS_4096,
               RBAA_TPM_ALG_RSASSA_4096         => Sel_TPM_ALG_RSASSA_4096,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P256 => Sel_TPM_ALG_ECDSA_ECC_NIST_P256,
               RBAA_TPM_ALG_RSAPSS_3072         => Sel_TPM_ALG_RSAPSS_3072,
               RBAA_TPM_ALG_RSASSA_3072         => Sel_TPM_ALG_RSASSA_3072,
               RBAA_TPM_ALG_RSAPSS_2048         => Sel_TPM_ALG_RSAPSS_2048,
               RBAA_TPM_ALG_RSASSA_2048         => Sel_TPM_ALG_RSASSA_2048,
               RBAA_Reserved_1                  => 0,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P521 => Sel_TPM_ALG_ECDSA_ECC_NIST_P521,
               Alg_External                     => [])
         );
         Resp_Alg_Struct_Count := Resp_Alg_Struct_Count + 1;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Check_Algorithms_Key_Schedule
            if Cap_Key_Ex
#end if;
         goto Prepare_Algorithms
      exception
         goto Error_Unspecified
      end Prepare_Algorithms_Req_Base_Asym_Alg;

#if FEATURE_KEY_EXCHANGE then
      state Check_Algorithms_Key_Schedule
      is
      begin
         Key_Schedule_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                               if A.Alg_Type = SPDM::Key_Schedule => A];
      transition
         goto Prepare_Algorithms_Key_Schedule
            if Key_Schedule_List'Size > 0 and Cap_Key_Ex
         goto Prepare_Algorithms
      exception
         goto Error_Unspecified
      end Check_Algorithms_Key_Schedule;

      state Prepare_Algorithms_Key_Schedule
      is
         Key_Schedule : SPDM::Alg_Struct;
      begin
         Key_Schedule := Key_Schedule_List'Head;
         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type        => SPDM::Key_Schedule,
               Fixed_Alg_Count => 2,
               Ext_Alg_Count   => 0,
               KS_Reserved_1   => 0,
               KS_SPDM         => Key_Schedule.KS_SPDM,
               KS_Reserved_2   => 0,
               Alg_External    => [])
         );
         Resp_Alg_Struct_Count := Resp_Alg_Struct_Count + 1;
      transition
         goto Prepare_Algorithms
      exception
         goto Error_Unspecified
      end Prepare_Algorithms_Key_Schedule;
#end if;
      state Prepare_Algorithms
      is
         Base_Hash_Sel : SPDM::Base_Hash_Algo;
         Ext_Asym      : SPDM::Ext_Algs;
         Ext_Hash      : SPDM::Ext_Algs;
      begin
         Measurement_Hash_Algo := Plat_Cfg_Sel_Measurement_Hash_Algo
                                     (Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_256,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_384,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_512,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_256,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_384,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_512,
                                      False);

         Base_Asym_Sel := Plat_Cfg_Sel_Base_Asym_Algo
                             (Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P384,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_4096,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_4096,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P256,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_3072,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_3072,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_2048,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_2048,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P521);

         Base_Hash_Sel := Plat_Cfg_Sel_Base_Hash_Algo
                             (Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_256,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_384,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_512,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_256,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_384,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_512);

         Response :=
            SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
               Meas_Cap                                          => Cap_Meas,
               Hash_Type                                         => SPDM::No_Measurement,
#end if;
               Hash_Length                                       => Hash_Length,
               Signature_Length                                  => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
               Exchange_Data_Length                              => Exchange_Data_Length,
               Handshake_In_The_Clear                            => Cap_Handshake_In_The_Clear,
#end if;
               Has_Signature                                     => False,
#if FEATURE_KEY_EXCHANGE then
               Has_Measurement_Hash                              => False,
#end if;
               Major_Version                                     => 1,
               Minor_Version                                     => 1,
               Code                                              => SPDM::Algorithms,
               Algorithms_Response_Resp_Alg_Struct_Count         => Resp_Alg_Struct_Count,
               Algorithms_Response_Param_2                       => 0,
               Algorithms_Response_Length                        => 36 + Resp_Alg_Structs'Size / 8,
               Algorithms_Response_Measurement_Specification_Sel => SPDM::DMTF,
               Algorithms_Response_Reserved_1                    => 0,
               Algorithms_Response_Measurement_Hash_Algo         => Measurement_Hash_Algo,
               Algorithms_Response_Base_Asym_Sel                 => Base_Asym_Sel,
               Algorithms_Response_Base_Hash_Sel                 => Base_Hash_Sel,
               Algorithms_Response_Reserved_2                    => 0,
               Algorithms_Response_Reserved_3                    => 0,
               Algorithms_Response_Ext_Asym_Sel_Count            => 0,
               Algorithms_Response_Ext_Hash_Sel_Count            => 0,
               Algorithms_Response_Reserved_4                    => 0,
               Algorithms_Response_Ext_Asym                      => Ext_Asym,
               Algorithms_Response_Ext_Hash                      => Ext_Hash,
               Algorithms_Response_Resp_Alg_Structs              => Resp_Alg_Structs);
#if FEATURE_KEY_EXCHANGE then
            Next_Transcript_State := Send_Alg;
#end if;
      transition
         --  ISSUE: Componolit/RecordFlux#907
         --  This cannot be done more elegantly right now
         goto Set_Hash_Len_32
            if Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA_256
               or Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA3_256
         goto Set_Hash_Len_48
            if Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA_384
               or Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA3_384
         goto Set_Hash_Len_64
            if Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA_512
               or Measurement_Hash_Algo = SPDM::MH_TPM_ALG_SHA3_512
         goto Error_Invalid_Request
      exception
         goto Error_Unspecified
      end Prepare_Algorithms;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Hash_Len_32
      is
      begin
         Hash_Length := 32;
      transition
         goto Set_Signature_Len
      end Set_Hash_Len_32;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Hash_Len_48
      is
      begin
         Hash_Length := 48;
      transition
         goto Set_Signature_Len
      end Set_Hash_Len_48;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Hash_Len_64
      is
      begin
         Hash_Length := 64;
      transition
         goto Set_Signature_Len
      end Set_Hash_Len_64;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len
      is
      begin
      transition
         goto Set_Signature_Len_64
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P256
         goto Set_Signature_Len_96
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P384
         goto Set_Signature_Len_132
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_ECDSA_ECC_NIST_P521
         goto Set_Signature_Len_256
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_RSAPSS_2048
               or Base_Asym_Sel = SPDM::BA_TPM_ALG_RSASSA_2048
         goto Set_Signature_Len_384
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_RSAPSS_3072
               or Base_Asym_Sel = SPDM::BA_TPM_ALG_RSASSA_3072
         goto Set_Signature_Len_512
            if Base_Asym_Sel = SPDM::BA_TPM_ALG_RSAPSS_4096
               or Base_Asym_Sel = SPDM::BA_TPM_ALG_RSASSA_4096
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_64
      is
      begin
         Signature_Length := 64;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_64;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_96
      is
      begin
         Signature_Length := 96;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_96;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_132
      is
      begin
         Signature_Length := 132;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_132;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_256
      is
      begin
         Signature_Length := 256;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_256;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_384
      is
      begin
         Signature_Length := 384;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_384;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Signature_Len_512
      is
      begin
         Signature_Length := 512;
      transition
#if FEATURE_KEY_EXCHANGE then
         goto Set_Exchange_Data_Len
            if Cap_Key_Ex
         goto Update_Transcript_Hash
#else
         goto Send_Idle
#end if;
      end Set_Signature_Len_512;
#if FEATURE_KEY_EXCHANGE then
      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len
      is
      begin
      transition
         goto Set_Exchange_Data_Len_64
            if DHE_Algo = DA_SecP256r1
         goto Set_Exchange_Data_Len_96
            if DHE_Algo = DA_SecP384r1
         goto Set_Exchange_Data_Len_132
            if DHE_Algo = DA_SecP521r1
         goto Set_Exchange_Data_Len_256
            if DHE_Algo = DA_FFDHE2048
         goto Set_Exchange_Data_Len_384
            if DHE_Algo = DA_FFDHE3072
         goto Set_Exchange_Data_Len_512
            if DHE_Algo = DA_FFDHE4096
         goto Error_Unspecified
      end Set_Exchange_Data_Len;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_64
      is
      begin
         Exchange_Data_Length := 64;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_64;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_96
      is
      begin
         Exchange_Data_Length := 96;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_96;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_132
      is
      begin
         Exchange_Data_Length := 132;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_132;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_256
      is
      begin
         Exchange_Data_Length := 256;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_256;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_384
      is
      begin
         Exchange_Data_Length := 384;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_384;

      --  ISSUE: Componolit/RecordFlux#907
      state Set_Exchange_Data_Len_512
      is
      begin
         Exchange_Data_Length := 512;
      transition
         goto Update_Transcript_Hash
      end Set_Exchange_Data_Len_512;
#end if;
      state Send_Idle
      is
      begin
         Transport'Write (Response);
      transition
         goto Reset_Idle
      end Send_Idle;

      state Reset_Idle
      is
      begin
#if FEATURE_KEY_EXCHANGE then
         Request'Reset
            (Hash_Length          => Hash_Length,
             Signature_Length     => Signature_Length,
             Exchange_Data_Length => Exchange_Data_Length);
#else
         Request'Reset;
#end if;
      transition
         goto Receive_Idle
      end Reset_Idle;

      state Receive_Idle
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            if Request'Valid and Request.Code = SPDM::Get_Version
         goto Prepare_Digests
            if Request'Valid and Request.Code = SPDM::Get_Digests
         goto Check_Certificate
            if Request'Valid and Request.Code = SPDM::Get_Certificate
         goto Prepare_Measurements
            if Request'Valid and Request.Code = SPDM::Get_Measurements
#if FEATURE_KEY_EXCHANGE then
         goto Prepare_Key_Exchange
            if Request'Valid and Request.Code = SPDM::Key_Exchange and Cap_Key_Ex
               and Secure_Session = False
         goto Prepare_Key_Update
            if Request'Valid and Request.Code = SPDM::Key_Update and Secure_Session
         goto Prepare_End_Session
            if Request'Valid and Request.Code = SPDM::End_Session and Secure_Session
         goto Error_Unexpected_Request
            if Request'Valid
               and (Request.Code = SPDM::Key_Exchange
                    or Request.Code = SPDM::End_Session
                    or Request.Code = SPDM::Key_Update)
#end if;
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Idle;

      state Prepare_Digests
      is
         Digests_Data   : Digests_Data;
         Slot_0_Present : SPDM::Slot_Present;
         Slot_1_Present : SPDM::Slot_Present;
         Slot_2_Present : SPDM::Slot_Present;
         Slot_3_Present : SPDM::Slot_Present;
         Slot_4_Present : SPDM::Slot_Present;
         Slot_5_Present : SPDM::Slot_Present;
         Slot_6_Present : SPDM::Slot_Present;
         Slot_7_Present : SPDM::Slot_Present;
      begin
         Reset_Measurement_Sig := True;
         Digests_Data := Plat_Get_Digests_Data (Measurement_Hash_Algo);
         Slot_0_Present := Digests_Data.Slot_0_Present;
         Slot_1_Present := Digests_Data.Slot_1_Present;
         Slot_2_Present := Digests_Data.Slot_2_Present;
         Slot_3_Present := Digests_Data.Slot_3_Present;
         Slot_4_Present := Digests_Data.Slot_4_Present;
         Slot_5_Present := Digests_Data.Slot_5_Present;
         Slot_6_Present := Digests_Data.Slot_6_Present;
         Slot_7_Present := Digests_Data.Slot_7_Present;

         Response := SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap                                    => Cap_Meas,
            Hash_Type                                   => SPDM::No_Measurement,
#end if;
            Hash_Length                                 => Hash_Length,
            Signature_Length                            => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
            Exchange_Data_Length                        => Exchange_Data_Length,
            Handshake_In_The_Clear                      => Cap_Handshake_In_The_Clear,
#end if;
            Has_Signature                               => False,
#if FEATURE_KEY_EXCHANGE then
            Has_Measurement_Hash                        => False,
#end if;
            Major_Version                               => 1,
            Minor_Version                               => 1,
            Code                                        => SPDM::Digests,
            Digests_Response_Param_1                    => 0,
            Digests_Response_Slot_Mask_Slot_7_Present   => Slot_7_Present,
            Digests_Response_Slot_Mask_Slot_6_Present   => Slot_6_Present,
            Digests_Response_Slot_Mask_Slot_5_Present   => Slot_5_Present,
            Digests_Response_Slot_Mask_Slot_4_Present   => Slot_4_Present,
            Digests_Response_Slot_Mask_Slot_3_Present   => Slot_3_Present,
            Digests_Response_Slot_Mask_Slot_2_Present   => Slot_2_Present,
            Digests_Response_Slot_Mask_Slot_1_Present   => Slot_1_Present,
            Digests_Response_Slot_Mask_Slot_0_Present   => Slot_0_Present,
            Digests_Response_Digests_Data               => Digests_Data.Value);
      transition
         goto Send_Idle
      exception
         goto Error_Unspecified
      end Prepare_Digests;

      state Check_Certificate
      is
         Valid : Boolean;
      begin
         Reset_Measurement_Sig := True;
         Slot   := Request.Get_Certificate_Request_Slot;
         Offset := Request.Get_Certificate_Request_Offset;
         Length := Request.Get_Certificate_Request_Length;
         Valid  := Plat_Valid_Certificate_Request (Slot, Offset, Length);
      transition
         goto Prepare_Certificate
            if Valid
         goto Error_Invalid_Request
      exception
         goto Error_Unspecified
      end Check_Certificate;

      state Prepare_Certificate
      is
         Cert                  : SPDM::Certificate_Response;
         Cert_Slot             : SPDM::Slot;
         Cert_Portion_Length   : SPDM::Portion_Length_16;
         Cert_Remainder_Length : SPDM::Length_16;
      begin
         Cert                  := Plat_Get_Certificate_Response (Slot, Offset, Length);
         Cert_Slot             := Cert.Slot;
         Cert_Portion_Length   := Cert.Portion_Length;
         Cert_Remainder_Length := Cert.Remainder_Length;

         Response := SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap                              => Cap_Meas,
            Hash_Type                             => SPDM::No_Measurement,
#end if;
            Hash_Length                           => Hash_Length,
            Signature_Length                      => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
            Exchange_Data_Length                  => Exchange_Data_Length,
            Handshake_In_The_Clear                => Cap_Handshake_In_The_Clear,
#end if;
            Has_Signature                         => False,
#if FEATURE_KEY_EXCHANGE then
            Has_Measurement_Hash                  => False,
#end if;
            Major_Version                         => 1,
            Minor_Version                         => 1,
            Code                                  => SPDM::Certificate,
            Certificate_Response_Slot             => Cert_Slot,
            Certificate_Response_Param_2          => 0,
            Certificate_Response_Portion_Length   => Cert_Portion_Length,
            Certificate_Response_Remainder_Length => Cert_Remainder_Length,
            Certificate_Response_Cert_Chain       => Cert.Cert_Chain);
      transition
         goto Send_Idle
      exception
         goto Error_Unspecified
      end Prepare_Certificate;

      state Prepare_Measurements
      is
         Success : Boolean;
      begin
         Success               := Plat_Update_Meas_Signature (Request'Opaque, Reset_Measurement_Sig);
         Reset_Measurement_Sig := False;
         Measurement_Record'Reset;
         Current_Measurement   := Request.Get_Measurements_Request_Measurement_Operation;
         Last_Measurement      := Request.Get_Measurements_Request_Measurement_Operation;
         Number_Of_Indices     := 0;
         Number_Of_Blocks      := 0;
#if FEATURE_KEY_EXCHANGE then
         Measurement_Summary   := False;
#end if;
      transition
         goto Prepare_Measurements_Number_Of_Indices
            if Request.Get_Measurements_Request_Measurement_Operation = 0 and Success
         goto Prepare_Measurements_All
            if Request.Get_Measurements_Request_Measurement_Operation = 255 and Success
         goto Prepare_Measurements_Records
            if Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_Measurements;

      state Prepare_Measurements_Number_Of_Indices
      is
      begin
         Number_Of_Indices := Plat_Get_Number_Of_Indices;
      transition
         goto Prepare_Measurements_Slot
            if Request.Get_Measurements_Request_Generate_Signature
         goto Prepare_Measurements_Response
      end Prepare_Measurements_Number_Of_Indices;

      state Prepare_Measurements_All
      is
         Local_Number_Of_Indices : SPDM::Measurement_Count;
      begin
         Current_Measurement := 1;
         --  ISSUE: Componolit/RecordFlux#1055
         --  Use a local variable to prevent a type error in the generated code.
         Local_Number_Of_Indices := Plat_Get_Number_Of_Indices;
         Last_Measurement        := Local_Number_Of_Indices;
      transition
         goto Prepare_Measurements_Records
      end Prepare_Measurements_All;

      state Prepare_Measurements_Records
      is
         Measurement_Field : SPDM::DMTF_Measurement_Field;
      begin
         Measurement_Field := Plat_Get_DMTF_Measurement_Field (Current_Measurement);
         Measurement_Record'Append (SPDM::Measurement_Block'
            (Index                                             => Current_Measurement,
             Measurement_Specification                         => SPDM::DMTF,
             Measurement_Length                                => Measurement_Field'Size / 8,
             DMTF_Measurement_Measurement_Value_Representation => Measurement_Field.Measurement_Value_Representation,
             DMTF_Measurement_Measurement_Value_Type           => Measurement_Field.Measurement_Value_Type,
             DMTF_Measurement_Measurement_Value_Length         => Measurement_Field.Measurement_Value_Length,
             DMTF_Measurement_Measurement_Value                => Measurement_Field.Measurement_Value));
         Current_Measurement := Current_Measurement + 1;
         Number_Of_Blocks := Number_Of_Blocks + 1;
         Measurement_Slot := SPDM::NS_0;
      transition
         goto Prepare_Measurements_Records
            if Current_Measurement <= Last_Measurement
#if FEATURE_KEY_EXCHANGE then
         goto Prepare_Key_Exchange_Hash
            if Measurement_Summary
#end if;
         goto Prepare_Measurements_Slot
            if Request.Get_Measurements_Request_Generate_Signature
         goto Prepare_Measurements_Response
      exception
         goto Error_Unspecified
      end Prepare_Measurements_Records;

      state Prepare_Measurements_Slot
      is
      begin
         Measurement_Slot := Request.Get_Measurements_Request_Slot_ID_Param;
      transition
         goto Prepare_Measurements_Response
      exception
         goto Error_Unspecified
      end Prepare_Measurements_Slot;

      state Prepare_Measurements_Response
      is
         Nonce : SPDM::Nonce;
         Opaque_Data : Opaque_Data;
         Has_Signature : Boolean;
      begin
         Nonce := Plat_Get_Nonce;
         Opaque_Data := Plat_Get_Meas_Opaque_Data;
         Has_Signature := Request.Get_Measurements_Request_Generate_Signature;
         Response'Reset (
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap               => Cap_Meas,
            Hash_Type              => SPDM::No_Measurement,
#end if;
            Hash_Length            => Hash_Length,
            Signature_Length       => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
            Exchange_Data_Length   => Exchange_Data_Length,
            Handshake_In_The_Clear => Cap_Handshake_In_The_Clear,
#end if;
#if FEATURE_KEY_EXCHANGE then
            Has_Signature          => Has_Signature,
            Has_Measurement_Hash   => False);
#else
            Has_Signature          => Has_Signature);
#end if;
            Response.Major_Version                                   := 1;
            Response.Minor_Version                                   := 1;
            Response.Code                                            := SPDM::Measurements;
            Response.Measurements_Response_Number_Of_Indices         := Number_Of_Indices;
            Response.Measurements_Response_Reserved_1                := 0;
            Response.Measurements_Response_Slot_ID                   := Measurement_Slot;
            Response.Measurements_Response_Number_Of_Blocks          := Number_Of_Blocks;
            Response.Measurements_Response_Measurement_Record_Length := Measurement_Record'Size / 8;
            Response.Measurements_Response_Measurement_Record        := Measurement_Record;
            Response.Measurements_Response_Nonce_Data                := Nonce.Data;
            Response.Measurements_Response_Opaque_Length             := Opaque_Data.Length;
            Response.Measurements_Response_Opaque_Data               := Opaque_Data.Data;
      transition
         goto Prepare_Measurements_Sign
            if Has_Signature
         goto Update_Measurement_Signature
      exception
         goto Error_Unspecified
      end Prepare_Measurements_Response;

      state Prepare_Measurements_Sign
      is
         Slot_ID       : SPDM::Narrow_Slot;
         Nonce_Offset  : SPDM::Length_24;
         Sign_Length   : SPDM::Length_24;
         Signature     : Signature;
         Opaque_Length_16 : SPDM::Length_16;
         Opaque_Length_24 : SPDM::Length_24;
      begin
         Signature := Null_Signature (Signature_Length);
         Response.Measurements_Response_Signature := Signature.Data;
         Nonce_Offset  := Response.Measurements_Response_Measurement_Record_Length + 8;
         Opaque_Length_16 := Response.Measurements_Response_Opaque_Length;
         Opaque_Length_24 := Opaque_Length_16;
         Sign_Length   := Response.Measurements_Response_Measurement_Record_Length + Opaque_Length_24 + 42;
         Slot_ID       := Response.Measurements_Response_Slot_ID;
         Signature := Plat_Get_Meas_Signature
            (Response'Opaque, Sign_Length, Nonce_Offset, Slot_ID);
         Response.Measurements_Response_Signature := Signature.Data;
         Reset_Measurement_Sig := True;
      transition
         goto Send_Idle
      exception
         goto Error_Unspecified
      end Prepare_Measurements_Sign;

      state Update_Measurement_Signature
      is
         Success : Boolean;
      begin
         Success := Plat_Update_Meas_Signature (Response'Opaque, Reset_Measurement_Sig);
      transition
         goto Send_Idle
            if Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Update_Measurement_Signature;
#if FEATURE_KEY_EXCHANGE then
      state Prepare_Key_Exchange
      is
         Valid_ID              : Boolean;
         Session_ID            : SPDM::Session_ID;
         Heartbeat_Period      : SPDM::Heartbeat_Period;
         Local_Use_Mutual_Auth : Boolean;
         Narrow_Slot           : SPDM::Narrow_Slot;
         Nonce                 : SPDM::Nonce;
         Exchange_Data         : Exchange_Data;
         Has_Measurement_Hash  : Boolean;
      begin
         Measurement_Record'Reset;
         Session_ID            := Request.Key_Exchange_Request_Req_Session_ID;
         Valid_ID              := Plat_Valid_Session_ID (Session_ID);
         Measurement_Summary   := True;
         Current_Measurement   := 1;
         Heartbeat_Period      := Plat_Get_Heartbeat_Period;
         Session_ID            := Plat_Get_Session_ID (Session_ID);
         Local_Use_Mutual_Auth := Plat_Use_Mutual_Auth;
         Narrow_Slot           := To_Narrow_Slot (Request.Key_Exchange_Request_Slot);
         Nonce                 := Plat_Get_Nonce;
         Exchange_Data         := Plat_Get_Exchange_Data (Request.Key_Exchange_Request_Exchange_Data);
         Has_Measurement_Hash :=
            Request.Key_Exchange_Request_Measurement_Summary_Hash_Type = SPDM::TCB_Measurement
            or Request.Key_Exchange_Request_Measurement_Summary_Hash_Type = SPDM::All_Measurements;
         Response'Reset (
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap               => Cap_Meas,
            Hash_Type              => SPDM::No_Measurement,
#end if;
            Hash_Length            => Hash_Length,
            Signature_Length       => Signature_Length,
            Exchange_Data_Length   => Exchange_Data_Length,
            Handshake_In_The_Clear => Cap_Handshake_In_The_Clear,
            Has_Signature          => True,
            Has_Measurement_Hash   => Has_Measurement_Hash);
         Response.Major_Version                                  := 1;
         Response.Minor_Version                                  := 1;
         Response.Code                                           := SPDM::Key_Exchange_RSP;
         Response.Key_Exchange_Response_Heartbeat_Period         := Heartbeat_Period;
         Response.Key_Exchange_Response_Param_2                  := 0;
         Response.Key_Exchange_Response_Resp_Session_ID          := Session_ID;
         Response.Key_Exchange_Response_Reserved_1               := 0;
         --  Both Mutual_Auth_Implicit and Mutual_Auth_Encapsulated
         --  require Encapsulated requests that are not supported.
         Response.Key_Exchange_Response_Mutual_Auth_Implicit     := False;
         Response.Key_Exchange_Response_Mutual_Auth_Encapsulated := False;
         Response.Key_Exchange_Response_Mutual_Auth              := Local_Use_Mutual_Auth;
         Response.Key_Exchange_Response_Reserved_2               := 0;
         Response.Key_Exchange_Response_Slot_ID_Param            := Narrow_Slot;
         Response.Key_Exchange_Response_Random_Data              := Nonce.Data;
         Response.Key_Exchange_Response_Exchange_Data            := Exchange_Data.Data;
      transition
         goto Prepare_Key_Exchange_No_Hash
            if Request.Key_Exchange_Request_Measurement_Summary_Hash_Type = SPDM::No_Measurement
               and Valid_ID
         goto Prepare_Key_Exchange_TCB_Hash
            if Request.Key_Exchange_Request_Measurement_Summary_Hash_Type = SPDM::TCB_Measurement
               and Valid_ID
         goto Prepare_Measurements_All
            if Request.Key_Exchange_Request_Measurement_Summary_Hash_Type = SPDM::All_Measurements
               and Valid_ID
         goto Error_Invalid_Request
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange;

      state Prepare_Key_Exchange_TCB_Hash
      is
      begin
         Number_Of_Indices := Plat_Get_Number_Of_Indices_TCB;
         Last_Measurement  := Number_Of_Indices;
      transition
         goto Prepare_Measurements_Records
      end Prepare_Key_Exchange_TCB_Hash;

      state Prepare_Key_Exchange_Hash
      is
         Summary_Hash : Hash;
      begin
         Summary_Hash := Plat_Get_Summary_Hash (Measurement_Record'Opaque);
         Response.Key_Exchange_Response_Measurement_Summary_Hash := Summary_Hash.Data;
      transition
         goto Prepare_Key_Exchange_Opaque_Data
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange_Hash;

      state Prepare_Key_Exchange_No_Hash
      is
      begin
         Response.Key_Exchange_Response_Measurement_Summary_Hash := [];
      transition
         goto Prepare_Key_Exchange_Opaque_Data
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange_No_Hash;

      state Prepare_Key_Exchange_Opaque_Data
      is
         Opaque_Data : Opaque_Data;
         Signature   : Signature;
      begin
         Signature   := Null_Signature (Signature_Length);
         Opaque_Data := Plat_Get_Key_Ex_Opaque_Data (Request.Key_Exchange_Request_Opaque_Data);
         Response.Key_Exchange_Response_Opaque_Data_Length := Opaque_Data.Length;
         Response.Key_Exchange_Response_Opaque_Data        := Opaque_Data.Data;
         Response.Key_Exchange_Response_Signature          := Signature.Data;
      transition
         goto Update_Transcript_Hash_Cert
            if Cap_Handshake_In_The_Clear
         goto Prepare_Key_Exchange_Verify_Data
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange_Opaque_Data;

      state Prepare_Key_Exchange_Verify_Data
      is
         Verify_Data : Hash;
      begin
         Verify_Data := Null_Hash (Hash_Length);
         Response.Key_Exchange_Response_Responder_Verify_Data := Verify_Data.Data;
      transition
         goto Update_Transcript_Hash_Cert
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange_Verify_Data;

      state Update_Transcript_Hash_Cert
      is
         Success           : Boolean;
         Req_Success       : Boolean;
         Resp_Success      : Boolean;
         Req_Length        : SPDM::Length_16;
         Resp_Length       : SPDM::Length_16;
         Key_Exchange_Slot : SPDM::Slot;
         Hash_Len          : SPDM::Length_16;
         Sig_Len           : SPDM::Length_16;
      begin
         Req_Length   := Request'Size;
         Req_Length   := Req_Length * 8;
         Resp_Length  := Response'Size;
         Hash_Len     := Hash_Length;
         Sig_Len      := Signature_Length;
         Resp_Length  := Resp_Length * 8 - Hash_Len - Sig_Len;
         Req_Success  := Plat_Update_Transcript_Signature (Request'Opaque, Req_Length, True);
         Resp_Success := Plat_Update_Transcript_Signature (Response'Opaque, Resp_Length, False);
         -- ISSUE: Componolit/RecordFlux#1063
         Key_Exchange_Slot     := Request.Key_Exchange_Request_Slot;
         Success               := Plat_Update_Transcript_Signature_Cert (Key_Exchange_Slot);
      transition
         goto Prepare_Key_Exchange_Sign
            if Success and Req_Success and Resp_Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Update_Transcript_Hash_Cert;

      state Prepare_Key_Exchange_Sign
      is
         Signature        : Signature;
      begin
         Signature := Plat_Get_Transcript_Signature (Request.Key_Exchange_Request_Slot);
         Response.Key_Exchange_Response_Signature := Signature.Data;
         Secure_Session := False;
      transition
         goto Send_Key_Exchange
            if Cap_Handshake_In_The_Clear
         goto Set_Key_Exchange_Verify_Data
      exception
         goto Error_Unspecified
      end Prepare_Key_Exchange_Sign;

      state Set_Key_Exchange_Verify_Data
      is
         Verify_Data : Hash;
      begin
         Verify_Data := Plat_Get_Key_Ex_Verify_Data;
         Response.Key_Exchange_Response_Responder_Verify_Data := Verify_Data.Data;
         Secure_Session := True;
      transition
         goto Send_Key_Exchange
      exception
         goto Error_Unspecified
      end Set_Key_Exchange_Verify_Data;

      state Send_Key_Exchange
      is
      begin
         Transport'Write (Response);
      transition
         goto Set_Secure_Session
      end Send_Key_Exchange;

      state Set_Secure_Session
      is
      begin
         Secure_Session := Plat_Set_Secure_Session (Secure_Session);
      transition
         goto Receive_Finish
      end Set_Secure_Session;

      state Receive_Finish
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            if Request'Valid and Request.Code = SPDM::Get_Version
         goto Validate_Finish_Response
            if Request'Valid and Request.Code = SPDM::Finish
         goto Error_Invalid_Request
      end Receive_Finish;

      state Validate_Finish_Response
      is
         Valid : Boolean;
      begin
         Valid := Plat_Validate_Finish_Signature (Request'Opaque, Request.Finish_Request_Slot);
      transition
         goto Error_Invalid_Request
            if Valid = False
         goto Prepare_Finish_Response_Mut_Auth
            if Use_Mutual_Auth = True
         goto Prepare_Finish_Response
      exception
         goto Error_Unspecified
      end Validate_Finish_Response;

      state Prepare_Finish_Response
      is
         Success : Boolean;
      begin
         Success := Plat_Update_Transcript_Signature_Cert (Request.Finish_Request_Slot);
         Response'Reset (
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap                => Cap_Meas,
            Hash_Type               => SPDM::No_Measurement,
#end if;
            Hash_Length             => Hash_Length,
            Signature_Length        => Signature_Length,
            Exchange_Data_Length    => 0,
            Handshake_In_The_Clear  => Cap_Handshake_In_The_Clear,
            Has_Signature           => False,
            Has_Measurement_Hash    => False);
         Response.Major_Version           := 1;
         Response.Minor_Version           := 1;
         Response.Code                    := SPDM::Finish_RSP;
         Response.Finish_Response_Param_1 := 0;
         Response.Finish_Response_Param_2 := 0;
         Next_Transcript_State := Send_Finish;
      transition
         goto Prepare_Finish_Response_Verify
            if Success and Cap_Handshake_In_The_Clear
         goto Update_Transcript_Hash
            if Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_Finish_Response;

      state Prepare_Finish_Response_Verify
      is
         Verify_Data   : Hash;
         Header        : SPDM_Header;
         Resp_Success  : Boolean;
         Req_Success   : Boolean;
         Req_Length    : SPDM::Length_16;
         Header_Length : SPDM::Length_16;
      begin
         Req_Length   := Request'Size;
         Req_Length   := Req_Length * 8;
         Header := SPDM_Header'(Major_Version => 1,
                                Minor_Version => 1,
                                Code          => SPDM::Finish_RSP);
         Header_Length := Header'Size;
         Header_Length := Header_Length * 8;
         Req_Success  := Plat_Update_Transcript_Signature (Request'Opaque, Req_Length, False);
         Resp_Success := Plat_Update_Transcript_Signature (Header'Opaque, Header_Length, False);
         Verify_Data  := Plat_Get_Finish_Verify_Data;
         Response.Finish_Response_Responder_Verify_Data := Verify_Data.Data;
         Secure_Session := Plat_Set_Secure_Session (True);
      transition
         goto Send_Idle
            if Req_Success and Resp_Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_Finish_Response_Verify;

      state Prepare_Finish_Response_Mut_Auth
      is
         Success             : Boolean;
         Finish_Request_Slot : SPDM::Slot;
      begin
         -- ISSUE: Componolit/RecordFlux#1063
         Finish_Request_Slot := Request.Finish_Request_Slot;
         Success             := Plat_Update_Transcript_Signature_Cert (Finish_Request_Slot);
      transition
         goto Prepare_Finish_Response
            if Success = True
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_Finish_Response_Mut_Auth;

      state Prepare_Key_Update
      is
         Success : Boolean;
      begin
         Success := Plat_Key_Update (Request.Key_Update_Request_Key_Operation);
         Response :=
            SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
               Meas_Cap                              => Cap_Meas,
               Hash_Type                             => SPDM::No_Measurement,
#end if;
               Hash_Length                           => Hash_Length,
               Signature_Length                      => Signature_Length,
               Exchange_Data_Length                  => 0,
               Handshake_In_The_Clear                => True,
               Has_Signature                         => False,
               Has_Measurement_Hash                  => False,
               Major_Version                         => 1,
               Minor_Version                         => 1,
               Code                                  => SPDM::Key_Update_ACK,
               Key_Update_ACK_Response_Key_Operation => Request.Key_Update_Request_Key_Operation,
               Key_Update_ACK_Response_Tag           => Request.Key_Update_Request_Tag);
      transition
         goto Send_Idle
            if Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_Key_Update;

      state Prepare_End_Session
      is
         Success : Boolean;
      begin
         Success := Plat_End_Session;
         Response :=
            SPDM::Response'(
#if FEATURE_CHALLENGE_AUTH then
               Meas_Cap                              => Cap_Meas,
               Hash_Type                             => SPDM::No_Measurement,
#end if;
               Hash_Length                           => Hash_Length,
               Signature_Length                      => Signature_Length,
               Exchange_Data_Length                  => 0,
               Handshake_In_The_Clear                => True,
               Has_Signature                         => False,
               Has_Measurement_Hash                  => False,
               Major_Version                         => 1,
               Minor_Version                         => 1,
               Code                                  => SPDM::End_Session_ACK,
               End_Session_Response_Reserved_1       => 0,
               End_Session_Response_Reserved_2       => 0);
         Secure_Session := False;
      transition
         goto Send_Idle
            if Success
         goto Error_Unspecified
      exception
         goto Error_Unspecified
      end Prepare_End_Session;
#end if;
      state Error_Unsupported_Request
      is
      begin
         Error_Code := SPDM::Unsupported_Request;
      transition
         goto Prepare_Error
      end Error_Unsupported_Request;

      state Error_Invalid_Request
      is
      begin
         Error_Code := SPDM::Invalid_Request;
      transition
         goto Prepare_Error
      end Error_Invalid_Request;
#if FEATURE_KEY_EXCHANGE then
      --  This state doesn't depend on key exchange
      --  but is currently only used by key exchange
      --  features.
      state Error_Unexpected_Request
      is
      begin
         Error_Code := SPDM::Unexpected_Request;
      transition
         goto Prepare_Error
      end Error_Unexpected_Request;
#end if;
      state Error_Unspecified
      is
      begin
         Error_Code := SPDM::Unspecified;
      transition
         goto Prepare_Error
      end Error_Unspecified;

      state Prepare_Error
      is
      begin
         Response'Reset (
#if FEATURE_CHALLENGE_AUTH then
            Meas_Cap               => Cap_Meas,
            Hash_Type              => SPDM::No_Measurement,
#end if;
            Hash_Length            => Hash_Length,
            Signature_Length       => Signature_Length,
#if FEATURE_KEY_EXCHANGE then
            Exchange_Data_Length   => 0,
            Handshake_In_The_Clear => Cap_Handshake_In_The_Clear,
#end if;
#if FEATURE_KEY_EXCHANGE then
            Has_Signature          => False,
            Has_Measurement_Hash   => False);
#else
            Has_Signature          => False);
#end if;
         Response.Major_Version             := 1;
         Response.Minor_Version             := 1;
         Response.Code                      := SPDM::Error;
         Response.Error_Response_Error_Code := Error_Code;
      transition
         goto Prepare_Unexpected_Request_Error
            if Error_Code = SPDM::Unsupported_Request
         goto Prepare_Zero_Data_Error
      exception
         goto End_Session
      end Prepare_Error;

      state Prepare_Zero_Data_Error
      is
      begin
         Response.Error_Response_Zero_Error_Data := 0;
      transition
         goto Send_Error
      exception
         goto End_Session
      end Prepare_Zero_Data_Error;

      state Prepare_Unexpected_Request_Error
      is
      begin
         Response.Error_Response_Request_Response_Code := Request.Code;
      transition
         goto Send_Error
      exception
         goto End_Session
      end Prepare_Unexpected_Request_Error;

      state Send_Error
      is
      begin
         Transport'Write (Response);
      transition
         goto Init
      end Send_Error;

      state End_Session is null state;
   end Session;

end SPDM_Responder;
