with SPDM;

package SPDM_Responder is

   --  FIXME: Update transcript hash

   type DHE_Algo is
      (DA_SecP521r1,
       DA_SecP384r1,
       DA_SecP256r1,
       DA_FFDHE4096,
       DA_FFDHE3072,
       DA_FFDHE2048) with Size => 8;

   type AEAD_Algo is
      (AA_ChaCha20_Poly1305,
       AA_AES_256_GCM,
       AA_AES_128_GCM) with Size => 8;

   type RBAA_Algo is
      (RA_TPM_ALG_ECDSA_ECC_NIST_P384,
       RA_TPM_ALG_RSAPSS_4096,
       RA_TPM_ALG_RSASSA_4096,
       RA_TPM_ALG_ECDSA_ECC_NIST_P256,
       RA_TPM_ALG_RSAPSS_3072,
       RA_TPM_ALG_RSASSA_3072,
       RA_TPM_ALG_RSAPSS_2048,
       RA_TPM_ALG_RSASSA_2048,
       RA_TPM_ALG_ECDSA_ECC_NIST_P521) with Size => 8;

   generic
      Transport : Channel with Readable, Writable;
      with function Plat_Cfg_CT_Exponent return SPDM::CT_Exponent;
      with function Plat_Cfg_Cap_MAC return Boolean;
      with function Plat_Cfg_Cap_Encrypt return Boolean;
      with function Plat_Cfg_Cap_Meas_Fresh return Boolean;
      with function Plat_Cfg_Cap_Meas return SPDM::Meas_Cap;
      with function Plat_Cfg_Cap_Chal return Boolean;
      with function Plat_Cfg_Cap_Cert return Boolean;
      with function Plat_Cfg_Cap_Cache return Boolean;
      with function Plat_Cfg_Cap_Handshake_In_The_Clear return Boolean;
      with function Plat_Cfg_Cap_Key_Upd return Boolean;
      with function Plat_Cfg_Cap_Hbeat return Boolean;
      with function Plat_Cfg_Cap_Encap return Boolean;
      with function Plat_Cfg_Cap_PSK return SPDM::PSK_Resp_Cap;
      with function Plat_Cfg_Cap_Key_Ex return Boolean;
      with function Plat_Cfg_Cap_Mut_Auth return Boolean;
      with function Plat_Cfg_Cap_Pub_Key_ID return Boolean;
      with function Plat_Cfg_Sel_Measurement_Hash_Algo (TPM_ALG_SHA256   : Boolean;
                                                        TPM_ALG_SHA_384  : Boolean;
                                                        TPM_ALG_SHA_512  : Boolean;
                                                        TPM_ALG_SHA3_256 : Boolean;
                                                        TPM_ALG_SHA3_384 : Boolean;
                                                        TPM_ALG_SHA3_512 : Boolean) return SPDM::Measurement_Hash_Algo;
      with function Plat_Cfg_Sel_Base_Asym_Algo (TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
                                                 TPM_ALG_RSAPSS_4096         : Boolean;
                                                 TPM_ALG_RSASSA_4096         : Boolean;
                                                 TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
                                                 TPM_ALG_RSAPSS_3072         : Boolean;
                                                 TPM_ALG_RSASSA_3072         : Boolean;
                                                TPM_ALG_RSAPSS_2048         : Boolean;
                                                 TPM_ALG_RSASSA_2048         : Boolean;
                                                 TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean) return SPDM::Base_Asym_Sel;
      with function Plat_Cfg_Sel_Base_Hash_Algo (TPM_ALG_SHA256   : Boolean;
                                                 TPM_ALG_SHA_384  : Boolean;
                                                 TPM_ALG_SHA_512  : Boolean;
                                                 TPM_ALG_SHA3_256 : Boolean;
                                                 TPM_ALG_SHA3_384 : Boolean;
                                                 TPM_ALG_SHA3_512 : Boolean) return SPDM::Base_Hash_Sel;
      with function Plat_Cfg_Sel_DHE
         (Req_SecP521r1 : Boolean;
          Req_SecP384r1 : Boolean;
          Req_SecP256r1 : Boolean;
          Req_FFDHE4096 : Boolean;
          Req_FFDHE3072 : Boolean;
          Req_FFDHE2048 : Boolean) return SPDM_Responder::DHE_Algo;

      with function Plat_Cfg_Sel_AEAD
         (Req_ChaCha20_Poly1305 : Boolean;
          Req_AES_256_GCM       : Boolean;
          Req_AES_128_GCM       : Boolean) return SPDM_Responder::AEAD_Algo;

      with function Plat_Cfg_Sel_RBAA
         (Req_TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
          Req_TPM_ALG_RSAPSS_4096         : Boolean;
          Req_TPM_ALG_RSASSA_4096         : Boolean;
          Req_TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
          Req_TPM_ALG_RSAPSS_3072         : Boolean;
          Req_TPM_ALG_RSASSA_3072         : Boolean;
          Req_TPM_ALG_RSAPSS_2048         : Boolean;
          Req_TPM_ALG_RSASSA_2048         : Boolean;
          Req_TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean) return SPDM_Responder::RBAA_Algo;

   session Session with
      Initial => Init,
      Final => End_Session
   is
      Request : SPDM::Request;
      Response : SPDM::Response;
      Supp_Versions : SPDM::Version_Number_Entries;
   begin
      state Init
      is
      begin
         Supp_Versions'Append
            (SPDM::Version_Number_Entry'(Alpha                 => 0,
                                         Update_Version_Number => 0,
                                         Minor_Version         => 1,
                                         Major_Version         => 1));
         --  FIXME: Reset all state
      transition
         goto Receive_Get_Version
      exception
         goto Error_Unspecified
      end Init;

      state Receive_Get_Version
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Version
            --  FIXME: [161] After receiving a GET_VERSION request, the Responder shall cancel all previous requests
            --  from the same Requester. All active sessions between the Requester and the Responder are terminated,
            --  i.e., information (such as session keys, session IDs) for those sessions should not be used anymore.
            --  Additionally, this message shall clear or reset the previously Negotiated State, if any,
            --  in both the Requester and its corresponding Responder.
            if Request'Valid and Request.Code = SPDM::Get_Version
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Get_Version;

      state Prepare_Version
      is
      begin
         Response := SPDM::Response'(Meas_Cap                                    => SPDM::Meas_Unsupported,
                                     Hash_Type                                   => SPDM::No_Measurement,
                                     Hash_Length                                 => 64,
                                     Signature_Length                            => 512,
                                     Exchange_Data_Length                        => 512,
                                     Handshake_In_The_Clear                      => False,
                                     Major_Version                               => 1,
                                     Minor_Version                               => 0,
                                     Code                                        => SPDM::Version,
                                     Version_Response_Param_1                    => 0,
                                     Version_Response_Param_2                    => 0,
                                     Version_Response_Reserved                   => 0,
                                     Version_Response_Version_Number_Entry_Count => 1,
                                     Version_Response_Version_Number_Entries     => Supp_Versions);
      transition
         goto Send_Version
      exception
         goto Error_Unspecified
      end Prepare_Version;

      state Send_Version
      is
      begin
         Transport'Write (Response);
      transition
         goto Receive_Get_Capabilities
      end Send_Version;

      state Receive_Get_Capabilities
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Capabilities
            if Request'Valid and Request.Code = SPDM::Get_Capabilities
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Get_Capabilities;

      state Prepare_Capabilities
      is
         CT_Exponent                : SPDM::CT_Exponent;
         Cap_MAC                    : Boolean;
         Cap_Encrypt                : Boolean;
         Cap_Meas_Fresh             : Boolean;
         Cap_Meas                   : SPDM::Meas_Cap;
         Cap_Chal                   : Boolean;
         Cap_Cert                   : Boolean;
         Cap_Cache                  : Boolean;
         Cap_Handshake_In_The_Clear : Boolean;
         Cap_Key_Upd                : Boolean;
         Cap_Hbeat                  : Boolean;
         Cap_Encap                  : Boolean;
         Cap_PSK                    : SPDM::PSK_Resp_Cap;
         Cap_Key_Ex                 : Boolean;
         Cap_Mut_Auth               : Boolean;
         Cap_Pub_Key_ID             : Boolean;
      begin
         CT_Exponent                := Plat_Cfg_CT_Exponent;
         Cap_MAC                    := Plat_Cfg_Cap_MAC;
         Cap_Encrypt                := Plat_Cfg_Cap_Encrypt;
         Cap_Meas_Fresh             := Plat_Cfg_Cap_Meas_Fresh;
         Cap_Meas                   := Plat_Cfg_Cap_Meas;
         Cap_Chal                   := Plat_Cfg_Cap_Chal;
         Cap_Cert                   := Plat_Cfg_Cap_Cert;
         Cap_Cache                  := Plat_Cfg_Cap_Cache;
         Cap_Handshake_In_The_Clear := Plat_Cfg_Cap_Handshake_In_The_Clear;
         Cap_Key_Upd                := Plat_Cfg_Cap_Key_Upd;
         Cap_Hbeat                  := Plat_Cfg_Cap_Hbeat;
         Cap_Encap                  := Plat_Cfg_Cap_Encap;
         Cap_PSK                    := Plat_Cfg_Cap_PSK;
         Cap_Key_Ex                 := Plat_Cfg_Cap_Key_Ex;
         Cap_Mut_Auth               := Plat_Cfg_Cap_Mut_Auth;
         Cap_Pub_Key_ID             := Plat_Cfg_Cap_Pub_Key_ID;

         Response :=
            SPDM::Response'(Meas_Cap                                         => SPDM::Meas_Unsupported,
                            Hash_Type                                        => SPDM::No_Measurement,
                            Hash_Length                                      => 64,
                            Signature_Length                                 => 512,
                            Exchange_Data_Length                             => 512,
                            Handshake_In_The_Clear                           => False,
                            Major_Version                                    => 1,
                            Minor_Version                                    => 1,
                            Code                                             => SPDM::Capabilities,
                            Capabilities_Response_Param_1                    => 0,
                            Capabilities_Response_Param_2                    => 0,
                            Capabilities_Response_Reserved_1                 => 0,
                            Capabilities_Response_CT_Exponent                => CT_Exponent,
                            Capabilities_Response_Reserved_2                 => 0,
                            Capabilities_Response_MAC_Cap                    => Cap_MAC,
                            Capabilities_Response_Encrypt_Cap                => Cap_Encrypt,
                            Capabilities_Response_Meas_Fresh_Cap             => Cap_Meas_Fresh,
                            Capabilities_Response_Meas_Cap                   => Cap_Meas,
                            Capabilities_Response_Chal_Cap                   => Cap_Chal,
                            Capabilities_Response_Cert_Cap                   => Cap_Cert,
                            Capabilities_Response_Cache_Cap                  => Cap_Cache,
                            Capabilities_Response_Handshake_In_The_Clear_Cap => Cap_Handshake_In_The_Clear,
                            Capabilities_Response_Key_Upd_Cap                => Cap_Key_Upd,
                            Capabilities_Response_Hbeat_Cap                  => Cap_Hbeat,
                            Capabilities_Response_Encap_Cap                  => Cap_Encap,
                            Capabilities_Response_PSK_Cap                    => Cap_PSK,
                            Capabilities_Response_Key_Ex_Cap                 => Cap_Key_Ex,
                            Capabilities_Response_Mut_Auth_Cap               => Cap_Mut_Auth,
                            Capabilities_Response_Reserved_4                 => 0,
                            Capabilities_Response_Pub_Key_ID_Cap             => Cap_Pub_Key_ID);
      transition
         goto Send_Capabilities
      exception
         goto Error_Unspecified
      end Prepare_Capabilities;

      state Send_Capabilities
      is
      begin
         Transport'Write (Response);
      transition
         goto Receive_Negotiate_Algorithms
      end Send_Capabilities;

      state Receive_Negotiate_Algorithms
      is
      begin
         Transport'Read (Request);
      transition
         goto Prepare_Algorithms
            if Request'Valid and Request.Code = SPDM::Negotiate_Algorithms
         goto Error_Unsupported_Request
            if Request'Valid
         goto Error_Invalid_Request
      end Receive_Negotiate_Algorithms;

      state Prepare_Algorithms
      is
         Measurement_Hash_Algo : SPDM::Measurement_Hash_Algo;
         Base_Hash_Sel         : SPDM::Base_Hash_Sel;
         Base_Asym_Sel         : SPDM::Base_Asym_Sel;
         Ext_Asym              : SPDM::Ext_Algs;
         Ext_Hash              : SPDM::Ext_Algs;
         Resp_Alg_Structs      : SPDM::Resp_Alg_Structs;
         No_Ext_Algs           : SPDM::Ext_Algs;
         DHE_Algo              : SPDM_Responder::DHE_Algo;
         AEAD_Algo             : SPDM_Responder::AEAD_Algo;
         RBAA_Algo             : SPDM_Responder::RBAA_Algo;

         Sel_SecP521r1 : Boolean;
         Sel_SecP384r1 : Boolean;
         Sel_SecP256r1 : Boolean;
         Sel_FFDHE4096 : Boolean;
         Sel_FFDHE3072 : Boolean;
         Sel_FFDHE2048 : Boolean;

         Sel_ChaCha20_Poly1305 : Boolean;
         Sel_AES_256_GCM       : Boolean;
         Sel_AES_128_GCM       : Boolean;

         Sel_TPM_ALG_ECDSA_ECC_NIST_P384 : Boolean;
         Sel_TPM_ALG_RSAPSS_4096         : Boolean;
         Sel_TPM_ALG_RSASSA_4096         : Boolean;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P256 : Boolean;
         Sel_TPM_ALG_RSAPSS_3072         : Boolean;
         Sel_TPM_ALG_RSASSA_3072         : Boolean;
         Sel_TPM_ALG_RSAPSS_2048         : Boolean;
         Sel_TPM_ALG_RSASSA_2048         : Boolean;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P521 : Boolean;

         DHE_List               : SPDM::Req_Alg_Structs;
         DHE                    : SPDM::Alg_Struct;
         AEAD_Cipher_Suite_List : SPDM::Req_Alg_Structs;
         AEAD_Cipher_Suite      : SPDM::Alg_Struct;
         Req_Base_Asym_Alg_List : SPDM::Req_Alg_Structs;
         Req_Base_Asym_Alg      : SPDM::Alg_Struct;
         Key_Schedule_List      : SPDM::Req_Alg_Structs;
         Key_Schedule           : SPDM::Alg_Struct;
      begin
         DHE_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                      if A.Alg_Type = SPDM::DHE => A];
         DHE := DHE_List'Head;

         AEAD_Cipher_Suite_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                                    if A.Alg_Type = SPDM::AEAD_Cipher_Suite => A];
         AEAD_Cipher_Suite := AEAD_Cipher_Suite_List'Head;

         Req_Base_Asym_Alg_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                                    if A.Alg_Type = SPDM::Req_Base_Asym_Alg => A];
         Req_Base_Asym_Alg := Req_Base_Asym_Alg_List'Head;

         Key_Schedule_List := [for A in Request.Negotiate_Algorithms_Request_Req_Alg_Structs
                               if A.Alg_Type = SPDM::Key_Schedule => A];
         Key_Schedule := Key_Schedule_List'Head;

         Measurement_Hash_Algo := Plat_Cfg_Sel_Measurement_Hash_Algo
                                     (Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_256,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_384,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_512,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_256,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_384,
                                      Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_512);

         Base_Asym_Sel := Plat_Cfg_Sel_Base_Asym_Algo
                             (Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P384,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_4096,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_4096,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P256,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_3072,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_3072,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSAPSS_2048,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_RSASSA_2048,
                              Request.Negotiate_Algorithms_Request_Base_Asym_Algo_TPM_ALG_ECDSA_ECC_NIST_P521);

         Base_Hash_Sel := Plat_Cfg_Sel_Base_Hash_Algo
                             (Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_256,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_384,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA_512,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_256,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_384,
                              Request.Negotiate_Algorithms_Request_Base_Hash_Algo_TPM_ALG_SHA3_512);

         --  DHE algorithm response

         DHE_Algo := Plat_Cfg_Sel_DHE
            (DHE.DHE_SecP521r1,
             DHE.DHE_SecP384r1,
             DHE.DHE_SecP256r1,
             DHE.DHE_FFDHE4096,
             DHE.DHE_FFDHE3072,
             DHE.DHE_FFDHE2048);

         Sel_SecP521r1 := DHE_Algo = DA_SecP521r1;
         Sel_SecP384r1 := DHE_Algo = DA_SecP384r1;
         Sel_SecP256r1 := DHE_Algo = DA_SecP256r1;
         Sel_FFDHE4096 := DHE_Algo = DA_FFDHE4096;
         Sel_FFDHE3072 := DHE_Algo = DA_FFDHE3072;
         Sel_FFDHE2048 := DHE_Algo = DA_FFDHE2048;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type        => SPDM::DHE,
               Fixed_Alg_Count => 2,
               Ext_Alg_Count   => 0,
               DHE_Reserved_1  => 0,
               DHE_SecP521r1   => Sel_SecP521r1,
               DHE_SecP384r1   => Sel_SecP384r1,
               DHE_SecP256r1   => Sel_SecP256r1,
               DHE_FFDHE4096   => Sel_FFDHE4096,
               DHE_FFDHE3072   => Sel_FFDHE3072,
               DHE_FFDHE2048   => Sel_FFDHE2048,
               DHE_Reserved_2  => 0,
               Alg_External    => No_Ext_Algs)
         );

         --  AEAD algorithm response

         AEAD_Algo := Plat_Cfg_Sel_AEAD
            (AEAD_Cipher_Suite.AEAD_ChaCha20_Poly1305,
             AEAD_Cipher_Suite.AEAD_AES_256_GCM,
             AEAD_Cipher_Suite.AEAD_AES_128_GCM);

         Sel_ChaCha20_Poly1305 := AEAD_Algo = AA_ChaCha20_Poly1305;
         Sel_AES_256_GCM       := AEAD_Algo = AA_AES_256_GCM;
         Sel_AES_128_GCM       := AEAD_Algo = AA_AES_128_GCM;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type               => SPDM::AEAD_Cipher_Suite,
               Fixed_Alg_Count        => 2,
               Ext_Alg_Count          => 0,
               AEAD_Reserved_1        => 0,
               AEAD_ChaCha20_Poly1305 => Sel_ChaCha20_Poly1305,
               AEAD_AES_256_GCM       => Sel_AES_256_GCM,
               AEAD_AES_128_GCM       => Sel_AES_128_GCM,
               AEAD_Reserved_2        => 0,
               Alg_External           => No_Ext_Algs)
         );

         --  Asymetric key signature algorithm response

         RBAA_Algo := Plat_Cfg_Sel_RBAA
            (Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P384,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_4096,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_4096,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P256,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_3072,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_3072,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSAPSS_2048,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_RSASSA_2048,
             Req_Base_Asym_Alg.RBAA_TPM_ALG_ECDSA_ECC_NIST_P521);

         Sel_TPM_ALG_ECDSA_ECC_NIST_P384 := RBAA_Algo = RA_TPM_ALG_ECDSA_ECC_NIST_P384;
         Sel_TPM_ALG_RSAPSS_4096         := RBAA_Algo = RA_TPM_ALG_RSAPSS_4096;
         Sel_TPM_ALG_RSASSA_4096         := RBAA_Algo = RA_TPM_ALG_RSASSA_4096;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P256 := RBAA_Algo = RA_TPM_ALG_ECDSA_ECC_NIST_P256;
         Sel_TPM_ALG_RSAPSS_3072         := RBAA_Algo = RA_TPM_ALG_RSAPSS_3072;
         Sel_TPM_ALG_RSASSA_3072         := RBAA_Algo = RA_TPM_ALG_RSASSA_3072;
         Sel_TPM_ALG_RSAPSS_2048         := RBAA_Algo = RA_TPM_ALG_RSAPSS_2048;
         Sel_TPM_ALG_RSASSA_2048         := RBAA_Algo = RA_TPM_ALG_RSASSA_2048;
         Sel_TPM_ALG_ECDSA_ECC_NIST_P521 := RBAA_Algo = RA_TPM_ALG_ECDSA_ECC_NIST_P521;

         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type                         => SPDM::Req_Base_Asym_Alg,
               Fixed_Alg_Count                  => 2,
               Ext_Alg_Count                    => 0,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P384 => Sel_TPM_ALG_ECDSA_ECC_NIST_P384,
               RBAA_TPM_ALG_RSAPSS_4096         => Sel_TPM_ALG_RSAPSS_4096,
               RBAA_TPM_ALG_RSASSA_4096         => Sel_TPM_ALG_RSASSA_4096,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P256 => Sel_TPM_ALG_ECDSA_ECC_NIST_P256,
               RBAA_TPM_ALG_RSAPSS_3072         => Sel_TPM_ALG_RSAPSS_3072,
               RBAA_TPM_ALG_RSASSA_3072         => Sel_TPM_ALG_RSASSA_3072,
               RBAA_TPM_ALG_RSAPSS_2048         => Sel_TPM_ALG_RSAPSS_2048,
               RBAA_TPM_ALG_RSASSA_2048         => Sel_TPM_ALG_RSASSA_2048,
               RBAA_Reserved_1                  => 0,
               RBAA_TPM_ALG_ECDSA_ECC_NIST_P521 => Sel_TPM_ALG_ECDSA_ECC_NIST_P521,
               Alg_External                     => No_Ext_Algs)
         );

         --  Key schedule response (currently static)
         Resp_Alg_Structs'Append (
            SPDM::Alg_Struct'(
               Alg_Type                         => SPDM::Key_Schedule,
               Fixed_Alg_Count                  => 2,
               Ext_Alg_Count                    => 0,
               KS_Reserved_1                    => 0,
               KS_SPDM                          => Key_Schedule.KS_SPDM,
               KS_Reserved_2                    => 0,
               Alg_External                     => No_Ext_Algs)
         );

         Response :=
            SPDM::Response'(Meas_Cap                                          => SPDM::Meas_Unsupported,
                            Hash_Type                                         => SPDM::No_Measurement,
                            Hash_Length                                       => 64,
                            Signature_Length                                  => 512,
                            Exchange_Data_Length                              => 512,
                            Handshake_In_The_Clear                            => False,
                            Major_Version                                     => 1,
                            Minor_Version                                     => 1,
                            Code                                              => SPDM::Algorithms,
                            Algorithms_Response_Resp_Alg_Struct_Count         => 4,
                            Algorithms_Response_Param_2                       => 0,
                            Algorithms_Response_Length_1                      => 52,
                            Algorithms_Response_Length_2                      => 0,
                            Algorithms_Response_Measurement_Specification_Sel => SPDM::DMTF,
                            Algorithms_Response_Reserved_1                    => 0,
                            Algorithms_Response_Measurement_Hash_Algo         => Measurement_Hash_Algo,
                            Algorithms_Response_Base_Asym_Sel                 => Base_Asym_Sel,
                            Algorithms_Response_Base_Hash_Sel                 => Base_Hash_Sel,
                            Algorithms_Response_Reserved_2                    => 0,
                            Algorithms_Response_Reserved_3                    => 0,
                            Algorithms_Response_Ext_Asym_Sel_Count            => 0,
                            Algorithms_Response_Ext_Hash_Sel_Count            => 0,
                            Algorithms_Response_Reserved_4                    => 0,
                            Algorithms_Response_Ext_Asym                      => Ext_Asym,
                            Algorithms_Response_Ext_Hash                      => Ext_Hash,
                            Algorithms_Response_Resp_Alg_Structs              => Resp_Alg_Structs);
      transition
         goto Send_Algorithms
      exception
         goto Error_Unspecified
      end Prepare_Algorithms;

      state Send_Algorithms
      is
      begin
         Transport'Write (Response);
      transition
         --  FIXME
         goto Receive_Get_Version
      end Send_Algorithms;

      state Error_Unsupported_Request
      is
      begin
         Response :=
            SPDM::Response'(Meas_Cap                             => SPDM::Meas_Unsupported,
                            Hash_Type                            => SPDM::No_Measurement,
                            Hash_Length                          => 64,
                            Signature_Length                     => 512,
                            Exchange_Data_Length                 => 512,
                            Handshake_In_The_Clear               => False,
                            Major_Version                        => 1,
                            Minor_Version                        => 1,
                            Code                                 => SPDM::Error,
                            Error_Response_Error_Code            => SPDM::Unsupported_Request,
                            Error_Response_Request_Response_Code => Request.Code);
      transition
         goto Send_Error
      exception
         goto End_Session
      end Error_Unsupported_Request;

      state Error_Invalid_Request
      is
      begin
         Response :=
            SPDM::Response'(Meas_Cap                       => SPDM::Meas_Unsupported,
                            Hash_Type                      => SPDM::No_Measurement,
                            Hash_Length                    => 64,
                            Signature_Length               => 512,
                            Exchange_Data_Length           => 512,
                            Handshake_In_The_Clear         => False,
                            Major_Version                  => 1,
                            Minor_Version                  => 1,
                            Code                           => SPDM::Error,
                            Error_Response_Error_Code      => SPDM::Invalid_Request,
                            Error_Response_Zero_Error_Data => 0);
      transition
         goto Send_Error
      exception
         goto End_Session
      end Error_Invalid_Request;

      state Error_Unspecified
      is
      begin
         Response :=
            SPDM::Response'(Meas_Cap                       => SPDM::Meas_Unsupported,
                            Hash_Type                      => SPDM::No_Measurement,
                            Hash_Length                    => 64,
                            Signature_Length               => 512,
                            Exchange_Data_Length           => 512,
                            Handshake_In_The_Clear         => False,
                            Major_Version                  => 1,
                            Minor_Version                  => 1,
                            Code                           => SPDM::Error,
                            Error_Response_Error_Code      => SPDM::Unspecified,
                            Error_Response_Zero_Error_Data => 0);
      transition
         goto Send_Error
      exception
         goto End_Session
      end Error_Unspecified;

      state Send_Error
      is
      begin
         Transport'Write (Response);
      transition
         goto End_Session
      end Send_Error;

      state End_Session is null state;
   end Session;

end SPDM_Responder;
