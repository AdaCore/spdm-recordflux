with SPDM_Emu;

package SPDM_Proxy is

   type Packet is
      message
         Data : Opaque
            with Size => Message'Size;
      end message;

   generic
      Emu_Transport : Channel with Readable, Writable;
      SPDM_Transport : Channel with Readable, Writable;
   session Proxy with
      Initial => Proxy_Receive_Request,
      Final => Proxy_Error
   is
      Emu_Packet  : SPDM_Emu::Platform_Port;
      SPDM_Packet : Packet;
   begin
      state Proxy_Receive_Request
      is
      begin
         Emu_Transport'Read (Emu_Packet);
      transition
         goto Proxy_Prepare_Request
            if Emu_Packet'Valid and Emu_Packet.Size > 0
         goto Proxy_Error
      end Proxy_Receive_Request;

      state Proxy_Prepare_Request
      is
      begin
         SPDM_Packet := Packet'(Data => Emu_Packet.SPDM_Payload);
      transition
         goto Proxy_Send_Request
      exception
         goto Proxy_Error
      end Proxy_Prepare_Request;

      state Proxy_Send_Request
      is
      begin
         SPDM_Transport'Write (SPDM_Packet);
      transition
         goto Proxy_Receive_Response
      end Proxy_Send_Request;

      state Proxy_Receive_Response
      is
      begin
         SPDM_Transport'Read (SPDM_Packet);
      transition
         goto Proxy_Prepare_Response
            if SPDM_Packet'Valid
         goto Proxy_Error
      end Proxy_Receive_Response;

      state Proxy_Prepare_Response
      is
      begin
         Emu_Packet := SPDM_Emu::Platform_Port'(Command => SPDM_Emu::Normal,
                                                Transport_Type => SPDM_Emu::None,
                                                Size => SPDM_Packet.Data'Size / 8,
                                                SPDM_Payload => SPDM_Packet.Data);
      transition
         goto Proxy_Send_Response
      exception
         goto Proxy_Error
      end Proxy_Prepare_Response;

      state Proxy_Send_Response
      is
      begin
         Emu_Transport'Write (Emu_Packet);
      transition
         goto Proxy_Receive_Request
      end Proxy_Send_Response;

      state Proxy_Error is null state;
   end Proxy;

end SPDM_Proxy;
